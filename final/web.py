import threading
import serial
import queue
import time
import panel as pn
import atexit
import asyncio
from openai import OpenAI
import json
import os
from datetime import datetime #l·∫•y th·ªùi gian th·ª±c
import signal


# Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·ªßa Panel
pn.extension()
client = OpenAI()


# ==========================
# C·∫•u h√¨nh l∆∞u tr·ªØ
# ==========================
CHAT_HISTORY_FILE = "chat_history.json"

# H√†m l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i v√†o t·ªáp JSON
def save_chat_histories():
    with open(CHAT_HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(chat_histories, f, ensure_ascii=False, indent=4)

# H√†m t·∫£i l·ªãch s·ª≠ h·ªôi tho·∫°i t·ª´ t·ªáp JSON
def load_chat_histories():
    if os.path.exists(CHAT_HISTORY_FILE):
        with open(CHAT_HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# Kh·ªüi t·∫°o l·ªãch s·ª≠ h·ªôi tho·∫°i
chat_histories = load_chat_histories()
current_chat_id = list(chat_histories.keys())[0] if chat_histories else "Chat 1"
if not chat_histories:
    chat_histories[current_chat_id] = []

# H√†m ƒë·ªïi t√™n chat_id trong l·ªãch s·ª≠ h·ªôi tho·∫°i
def rename_chat_id(old_id, new_id):
    if old_id in chat_histories and new_id not in chat_histories:
        chat_histories[new_id] = chat_histories.pop(old_id)
        save_chat_histories()


# ==========================
# Bi·∫øn to√†n c·ª•c
# ==========================
global data, led_status, is_stopping, h_serial, h_reading_thread, h_control_thread
data = 0.0  # L∆∞u gi√° tr·ªã c·∫£m bi·∫øn √°nh s√°ng
led_status = 'OFF'
is_stopping = False
h_serial = None
h_reading_thread = None
h_control_thread = None

cmd_queue = queue.Queue()


# ==========================
# Giao di·ªán v√† logic UI
# ==========================
sensor_view = pn.indicators.Number(
    name="C·∫£m bi·∫øn √°nh s√°ng", 
    value=data, 
    colors=[(1000, "green"), (2000, "red")],
    css_classes=["view"]
)

led_status_view = pn.widgets.StaticText(
    name="Tr·∫°ng th√°i LED", 
    value=led_status, 
    css_classes=["view"]
)

# N√∫t ƒëi·ªÅu khi·ªÉn LED
toggle_led_button = pn.widgets.Button(
    name="B·∫≠t/T·∫Øt LED", 
    button_type="success",
    styles={'width': '200px', 'height': '50px'}
)

# H√†m c·∫≠p nh·∫≠t giao di·ªán
def update_ui():
    sensor_view.value = data
    led_status_view.value = led_status
    print(f"C·∫≠p nh·∫≠t giao di·ªán: data={data}, led_status={led_status}")

# H√†m b·∫≠t/t·∫Øt ƒë√®n tr√™n web
def toggle_led(event):
    global led_status

    if led_status == 'OFF':
        cmd_queue.put('1')  # G·ª≠i l·ªánh b·∫≠t LED
        led_status = 'ON'
    else:
        cmd_queue.put('0')  # G·ª≠i l·ªánh t·∫Øt LED
        led_status = 'OFF'
    update_ui()

toggle_led_button.on_click(toggle_led)


# H√†m t·∫Øt ƒë√®n
def turn_off_light():
    global led_status

    cmd_queue.put('0')  # G·ª≠i l·ªánh t·∫Øt LED
    led_status = 'OFF'
    update_ui()

    return "ƒê√®n ƒë√£ ƒë∆∞·ª£c t·∫Øt."

# H√†m b·∫≠t ƒë√®n
def turn_on_light():
    global led_status

    cmd_queue.put('1')  # G·ª≠i l·ªánh b·∫≠t LED
    led_status = 'ON'
    update_ui()

    return "ƒê√®n ƒë√£ ƒë∆∞·ª£c b·∫≠t."

# H√†m tr·∫£ v·ªÅ tr·∫°ng th√°i c·ªßa ƒë√®n
def get_led_status():
    global led_status

    if led_status == 'ON':
        return "ƒê√®n ƒëang b·∫≠t"
    elif led_status == 'OFF':
        return "ƒê√®n ƒëang t·∫Øt"
    elif led_status == 'BLINKING':
        return "ƒê√®n ƒëang nh·∫•p nh√°y"
    else:
        return "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c tr·∫°ng th√°i ƒë√®n"

# ==================================
# X·ª≠ l√Ω Function Calling v·ªõi GPT
# ==================================
def chat_with_gpt(user_input):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI gi√∫p ƒëi·ªÅu khi·ªÉn ƒë√®n LED IoT. B·∫°n c√≥ th·ªÉ b·∫≠t, t·∫Øt v√† ki·ªÉm tra tr·∫°ng th√°i ƒë√®n LED. N·∫øu tr·ªùi s√°ng qu√°, h√£y t·∫Øt ƒë√®n, c√≤n n·∫øu tr·ªùi t·ªëi, h√£y b·∫≠t ƒë√®n l√™n nh√©!"},
            {"role": "user", "content": user_input}
        ],
        functions=[
            {
                "name": "turn_on_light",
                "description": "B·∫≠t ƒë√®n LED."
            },
            {
                "name": "turn_off_light",
                "description": "T·∫Øt ƒë√®n LED."
            },
            {
                "name": "get_led_status",
                "description": "L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ƒë√®n LED."
            }
        ],
        function_call="auto"
    )
    
    return response.choices[0].message
    
def handle_response(response_message):
    if response_message.function_call:
        function_name = response_message.function_call.name
        
        if function_name == "turn_on_light":
            return turn_on_light()
        
        if function_name == "turn_off_light":
            return turn_off_light()
        
        if function_name == "get_led_status":
            return get_led_status()
    
    else:
        return response_message.content
    

# ==========================
# C·∫•u h√¨nh Chatbot
# ==========================
async def get_response(contents, user, instance):
    global current_chat_id

    # ƒê·ªïi t√™n chat_id cho d·ªÖ ph√¢n bi·ªát c√°c ƒëo·∫°n chat
    if "Chat" in current_chat_id and current_chat_id != contents: 
        rename_chat_id(current_chat_id, contents)
        current_chat_id = contents

    response_msg = chat_with_gpt(contents)
    response = handle_response(response_msg)

    for i in range(len(response)):
        yield response[:i+1]
        await asyncio.sleep(0.02)

    # K√≠ch ho·∫°t Text-to-Speech khi chatbot ho√†n th√†nh ph·∫£n h·ªìi
    text_to_speech.value = response
    text_to_speech.speak = True

    # L∆∞u ƒëo·∫°n chat v√†o l·ªãch s·ª≠
    if current_chat_id not in chat_histories:
        chat_histories[current_chat_id] = []

    chat_histories[current_chat_id].append({
        "user": contents,
        "bot": response,
        "timestamp": datetime.now().isoformat()
    })

    # L∆∞u v√†o t·ªáp JSON
    save_chat_histories()
    update_chat_list()


# Kh·ªüi t·∫°o Chat Interface
chat_bot = pn.chat.ChatInterface(
    callback=get_response, 
    max_height=500,
    show_clear=False
)

# T·∫£i n·ªôi dung h·ªôi tho·∫°i hi·ªán t·∫°i
for msg in chat_histories[current_chat_id]:
    timestamp = datetime.fromisoformat(msg['timestamp']) if 'timestamp' in msg else datetime.now()
    chat_bot.send(msg['user'], user="User", respond=False, timestamp=timestamp)
    chat_bot.send(msg['bot'], user="Assistant", respond=False, timestamp=timestamp)

# ==========================
# Qu·∫£n l√Ω danh s√°ch chat
# ==========================
chat_list = pn.widgets.Select(name="Danh s√°ch ƒëo·∫°n chat", options=list(chat_histories.keys()), width=250)

def update_chat_list():
    """C·∫≠p nh·∫≠t danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i."""
    chat_list.options = list(chat_histories.keys())

def load_chat(event):
    """T·∫£i m·ªôt cu·ªôc h·ªôi tho·∫°i t·ª´ danh s√°ch."""
    global current_chat_id
    selected_chat = chat_list.value
    if selected_chat and selected_chat in chat_histories:
        current_chat_id = selected_chat
        chat_bot.clear()
        for msg in chat_histories[current_chat_id]:
            timestamp = datetime.fromisoformat(msg['timestamp']) if 'timestamp' in msg else datetime.now()
            chat_bot.send(msg['user'], user="User", respond=False, timestamp=timestamp)
            chat_bot.send(msg['bot'], user="Assistant", respond=False, timestamp=timestamp)



chat_list.param.watch(load_chat, 'value')

# B·∫Øt ƒë·∫ßu m·ªôt cu·ªôc h·ªôi tho·∫°i m·ªõi
def start_new_chat(event):
    global current_chat_id

    if chat_histories[current_chat_id] == []:
        return
    new_chat_id = f"Chat {len(chat_histories) + 1}"
    chat_histories[new_chat_id] = []
    current_chat_id = new_chat_id
    chat_bot.clear()
    update_chat_list()
    save_chat_histories()

# N√∫t b·∫Øt ƒëo·∫°n chat m·ªõi
new_chat_button = pn.widgets.Button(name="üÜï New chat", button_type="primary")
new_chat_button.on_click(start_new_chat)

# H√†m x√≥a ƒëo·∫°n chat hi·ªán t·∫°i
def delete_current_chat(event):
    global current_chat_id
    if current_chat_id in chat_histories:
        del chat_histories[current_chat_id]
        save_chat_histories()
        current_chat_id = list(chat_histories.keys())[0] if chat_histories else "Chat 1"
        if not chat_histories:
            chat_histories[current_chat_id] = []
        chat_bot.clear()
        update_chat_list()

# N√∫t x√≥a ƒëo·∫°n chat hi·ªán t·∫°i
delete_chat_button = pn.widgets.Button(name="üóëÔ∏è X√≥a ƒëo·∫°n chat hi·ªán t·∫°i", button_type="danger")
delete_chat_button.on_click(delete_current_chat)


# ===========================================
# C·∫•u h√¨nh Speech-to-Text v√† Text-to-Speech
# ===========================================
# Widget ch·ªçn ng√¥n ng·ªØ
language_selector = pn.widgets.Select(
    name='Ch·ªçn ng√¥n ng·ªØ', 
    options={'Ti·∫øng Vi·ªát': 'vi-VN', 'English': 'en-US'}, 
    value='en-US',
    width=200
)

# Widget Speech-to-Text
speech_to_text = pn.widgets.SpeechToText(button_type="light", height=50, lang=language_selector.value)

# Widget text to speech
text_to_speech = pn.widgets.TextToSpeech(name="Voicebot", auto_speak=False)

# H√†m c·∫≠p nh·∫≠t ng√¥n ng·ªØ cho Speech-to-Text v√† Text-to-Speech
def update_language(event):
    speech_to_text.lang = event.new
    text_to_speech.lang = event.new

language_selector.param.watch(update_language, 'value')

# X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Speech-to-Text v√† g·ª≠i ƒë·∫øn ChatBot
def handle_speech_results(results):
    if speech_to_text.results:
        text = speech_to_text.results[0]['alternatives'][0]['transcript']
        user_input = str(text)
        chat_bot.send(user_input, user="User", respond=True)


# ==========================
# C·∫•u h√¨nh giao di·ªán
# ==========================
sidebar = pn.Column(
    "## üí¨ **ChatGPT-Like Interface**",
    language_selector, 
    speech_to_text,
    pn.bind(handle_speech_results, speech_to_text),
    chat_list,
    new_chat_button,
    delete_chat_button,
    width=300,
    height=500,
    css_classes=["sidebar"]
)


dashboard = pn.template.FastListTemplate(
    title='Smart Lighting System', 
    main=[pn.Row(sensor_view, 
                 pn.Column(led_status_view, toggle_led_button)),
          pn.Row(
            sidebar, 
            pn.Column(
                "## ü§ñ **ChatBot**",
                chat_bot,
                text_to_speech
            )
          ),
         ],

    theme="dark",
    theme_toggle=False,
    background_color="#2c2828",
    accent="#00A170"
)

# Th√™m CSS t√πy ch·ªânh
theme_css = """
.sidebar {
    #background-color: #F9F9F9;
    padding: 10px;
    border-right: 1px solid #DDDDDD;
}

.view {
    font-size: 24px;
    text-align: center;
    padding: 20px;
    margin: 10px;
}
"""


# ==========================
# Serial v√† Threads
# ==========================
# Thread ƒë·ªçc d·ªØ li·ªáu t·ª´ c·ªïng COM
def readingThread(ser):
    global is_stopping, data, led_status

    while not is_stopping:
        if ser and ser.is_open:
            try:
                line = ser.readline().strip()

                if line == b'ON':
                    led_status = 'ON'
                elif line == b'OFF':
                    led_status = 'OFF'
                elif line == b'BLINK':
                    led_status = 'BLINKING'
                else:
                    update_data(line)
            except Exception as e:
                print(f"L·ªói trong readingThread: {e}")

# Thread ƒëi·ªÅu khi·ªÉn c·ªïng COM
def controlThread(ser):
    global is_stopping

    while not is_stopping:
        if ser and ser.is_open:
            try:
                if cmd_queue.empty():
                    time.sleep(1)
                else:
                    cmd = cmd_queue.get()
                    print(cmd)
                    ser.write(cmd.encode())
            except Exception as e:
                print(f"L·ªói trong controlThread: {e}")



def update_data(s):
    global data
    try:
        data = float(s)
        return True
    except ValueError:
        return False

# H√†m kh·ªüi t·∫°o c·ªïng COM
def initialize_serial():
    global h_serial
    if h_serial and h_serial.is_open:
        h_serial.close()
    try:
        h_serial = serial.Serial('COM7', 115200, timeout=1)
    except serial.SerialException as e:
        print(f"L·ªói khi kh·ªüi t·∫°o c·ªïng COM: {e}")
        h_serial = None


# H√†m ƒë·∫∑t l·∫°i tr·∫°ng th√°i
def reset_state():
    global data, led_status, is_stopping, h_serial, h_reading_thread, h_control_thread

    # ƒê·∫∑t tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
    data = 0.0
    led_status = 'OFF'
    is_stopping = False

    # Kh·ªüi t·∫°o l·∫°i c·ªïng COM
    initialize_serial()

    # Kh·ªüi ƒë·ªông l·∫°i c√°c lu·ªìng
    if not h_reading_thread or not h_reading_thread.is_alive():
        h_reading_thread = threading.Thread(target=readingThread, args=(h_serial,))
        h_reading_thread.start()

    if not h_control_thread or not h_control_thread.is_alive():
        h_control_thread = threading.Thread(target=controlThread, args=(h_serial,))
        h_control_thread.start()


# H√†m d·ªçn d·∫πp t√†i nguy√™n khi tho√°t
def cleanup():
    global is_stopping
    print("\nƒêang t·∫Øt h·ªá th·ªëng...")
    is_stopping = True
    if h_serial and h_serial.is_open:
        h_serial.close()
    if h_reading_thread.is_alive():
        h_reading_thread.join()
    if h_control_thread.is_alive():
        h_control_thread.join()
    print("H·ªá th·ªëng ƒë√£ t·∫Øt.")

# ƒêƒÉng k√Ω cleanup khi tho√°t
atexit.register(cleanup)

# H√†m x·ª≠ l√Ω t√≠n hi·ªáu
def signal_handler(sig, frame):
    print("\nT√≠n hi·ªáu SIGINT nh·∫≠n ƒë∆∞·ª£c, ƒëang d·ªçn d·∫πp...")
    cleanup()
    print("Tho√°t ch∆∞∆°ng tr√¨nh.")
    exit(0)  # Tho√°t ch∆∞∆°ng tr√¨nh

# ƒêƒÉng k√Ω h√†m x·ª≠ l√Ω t√≠n hi·ªáu SIGINT (Ctrl+C)
signal.signal(signal.SIGINT, signal_handler)


# ==========================
# Kh·ªüi ƒë·ªông h·ªá th·ªëng
# ==========================

# Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu
reset_state()

# Th√™m CSS t√πy ch·ªânh v√†o c·∫•u h√¨nh
pn.config.raw_css.append(theme_css)

# Th√™m callback c·∫≠p nh·∫≠t m·ªói 1 gi√¢y
pn.state.add_periodic_callback(update_ui, period=1000)  # 1000 ms = 1 gi√¢y

# Ch·∫°y ·ª©ng d·ª•ng Panel
dashboard.servable()